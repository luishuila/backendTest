AWSTemplateFormatVersion: '2010-09-09'
Description: Laravel on ECS Fargate + ALB + (opcional) RDS PostgreSQL público

Parameters:
  ProjectName:
    Type: String
    Default: laravel-ecs
  Env:
    Type: String
    Default: prod
  AWSRegion:
    Type: String
    Default: us-east-1
  LaravelImage:
    Type: String
    Description: ECR image URI (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/laravel:latest)
  ForceUpdate:
    Type: String
    Default: "0"
    Description: "Cambiar este valor para forzar nueva revisión de TaskDefinition"
    
  DomainAccess:
    Type: String
    Default: "https://main.d22lhfa5x4lj9x.amplifyapp.com"

  # === AGREGADO: Certificado para HTTPS ===
  ACMCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:697241029346:certificate/13498df3-ad39-44e8-943b-9d51529be021
    Description: ARN del certificado ACM para HTTPS en el ALB

  ContainerPort:
    Type: Number
    Default: 80
  PhpFpmPort:
    Type: Number
    Default: 9000
  DesiredCount:
    Type: Number
    Default: 2

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.101.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.102.0/24

  HealthCheckPath:
    Type: String
    Default: /api/health

  LaravelAppKey:
    Type: String
    NoEcho: true
    Description: base64:… de php artisan key:generate --show
  JWTSecret:
    Type: String
    NoEcho: true
    Description: JWT secret (HS256)

  # ======== Modo de BD ========
  UseExistingDb:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: "true = usa BD externa (DBHost); false = crea RDS y lo inyecta"
  PublicDbAccessCidr:
    Type: String
    Default: '0.0.0.0/0'
    Description: "CIDR que podrá conectarse directo al RDS (usa TU_IP/32 en pruebas)"

  # ======== Variables de BD (comunes) ========
  DBConnection:
    Type: String
    Default: pgsql
  DBHost:
    Type: String
    Default: ''
    Description: Host/IP de BD existente si UseExistingDb=true
  DBPort:
    Type: Number
    Default: 5432
  DBDatabase:
    Type: String
    Default: tasksdb
  DBUsername:
    Type: String
    NoEcho: true
    Default: postgres
  DBPassword:
    Type: String
    NoEcho: true
    Description: Password BD
  DBSSLMode:
    Type: String
    Default: 'require'
    AllowedValues: ['disable', 'allow', 'prefer', 'require', 'verify-ca', 'verify-full']

  # ======== Config de RDS (si se crea) ========
  DBInstanceClass:
    Type: String
    Default: db.t4g.micro
  DBAllocatedStorage:
    Type: Number
    Default: 20
  DBEngineVersion:
    Type: String
    Default: '16.3'

  CreateNatGateway:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'

Conditions:
  UseNat: !Equals [!Ref CreateNatGateway, 'true']
  UseExternalDb: !Equals [!Ref UseExistingDb, 'true']
  CreateRds: !Equals [!Ref UseExistingDb, 'false']

Resources:
  # --- Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  NatEip:
    Type: AWS::EC2::EIP
    Condition: UseNat
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: UseNat
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-rt'

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Condition: UseNat
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-a'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-b'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-a'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-b'

  PublicSubnet1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # --- Security Groups ---
  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb-sg'

  ServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Service SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AlbSG
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-svc-sg'

  RDSSG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateRds
    Properties:
      GroupDescription: RDS PostgreSQL SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: !Ref ServiceSG
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: !Ref PublicDbAccessCidr
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-rds-sg'

  # --- ALB ---
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-alb'
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref AlbSG]
      Type: application

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-tg'
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: !Ref HealthCheckPath
      Matcher:
        HttpCode: '200-399'

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      # === CAMBIO: redirige HTTP -> HTTPS 443 ===
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301

  # === AGREGADO: Listener HTTPS 443 con certificado ===
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACMCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # --- Logs + Cluster ---
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 14

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-cluster'

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

  # --- RDS (si UseExistingDb=false) ---
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: CreateRds
    Properties:
      DBSubnetGroupDescription: !Sub '${ProjectName} public subnets for RDS'
      SubnetIds: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      DBSubnetGroupName: !Sub '${ProjectName}-${Env}-dbsubnets'

  PostgresDB:
    Type: AWS::RDS::DBInstance
    Condition: CreateRds
    Properties:
      DBInstanceIdentifier: !Sub '${ProjectName}-${Env}-pg'
      Engine: postgres
      EngineVersion: !Ref DBEngineVersion
      DBInstanceClass: !Ref DBInstanceClass
      PubliclyAccessible: true
      MultiAZ: false
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: gp3
      Port: !Ref DBPort
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBDatabase
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSG
      DeletionProtection: false
      DeleteAutomatedBackups: true
      BackupRetentionPeriod: 0
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Env}-pg'

  # --- Task Definition ---
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-task'
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RuntimePlatform:
        OperatingSystemFamily: LINUX
        CpuArchitecture: X86_64
      ContainerDefinitions:
        - Name: app
          Image: !Ref LaravelImage
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LinuxParameters:
            InitProcessEnabled: true
          Environment:
            - Name: APP_ENV
              Value: production
            - Name: APP_DEBUG
              Value: 'false'
            - Name: APP_URL
              Value: !Sub 'http://${ALB.DNSName}'
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWSRegion
            - Name: JWT_ALGO
              Value: HS256
            - Name: PHP_FPM_PORT
              Value: !Sub '${PhpFpmPort}'
            # ======== ENV BD ========
            - Name: DB_CONNECTION
              Value: !Ref DBConnection
            - Name: DB_HOST
              Value: !If [UseExternalDb, !Ref DBHost, !GetAtt PostgresDB.Endpoint.Address]
            - Name: DB_PORT
              Value: !Sub '${DBPort}'
            - Name: DB_DATABASE
              Value: !Ref DBDatabase
            - Name: DB_USERNAME
              Value: !Ref DBUsername
            - Name: DB_PASSWORD
              Value: !Ref DBPassword
            - Name: DB_SSLMODE
              Value: !Ref DBSSLMode
            - Name: FORCE_ROLL
              Value: !Ref ForceUpdate
            # ======== ENV APP (usabas los parámetros pero no se inyectaban) ========
            - Name: APP_KEY
              Value: !Ref LaravelAppKey
            - Name: JWT_SECRET
              Value: !Ref JWTSecret
            - Name: LOG_CHANNEL
              Value: stderr
            - Name: LOG_LEVEL
              Value: debug

            # ======== CORS (SOLO AÑADIDO) ========
            - Name: FRONTEND_URL
              Value: !Ref DomainAccess
            # ======== FIN CORS ========

          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: app
          HealthCheck:
            Command: ["CMD-SHELL", "curl -fsS http://localhost/api/health || exit 1"]
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 10

  # --- Service ---
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - HTTPListener
      - HTTPSListener
    Properties:
      ServiceName: !Sub '${ProjectName}-svc'
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !If [UseNat, DISABLED, ENABLED]
          SecurityGroups: [!Ref ServiceSG]
          Subnets: !If
            - UseNat
            - [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
            - [!Ref PublicSubnet1, !Ref PublicSubnet2]
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50

Outputs:
  ALBURL:
    Description: Public URL del ALB
    Value: !Sub 'http://${ALB.DNSName}'
  ALBURLHTTPS:
    Description: Public HTTPS URL del ALB
    Value: !Sub 'https://${ALB.DNSName}'
  ClusterName:
    Value: !Ref ECSCluster
  ServiceName:
    Value: !Ref ECSService
  DBEndpoint:
    Condition: CreateRds
    Description: Endpoint RDS (si se creó)
    Value: !GetAtt PostgresDB.Endpoint.Address
